{
  
    
        "post0": {
            "title": "Neural Network as a collection of Journalists",
            "content": "Neural Network as a collection of Journalists . A non-mathematical introduction to neural networks by parallelizing the neurons in neural networks with unit journalists asking questions. . This metaphor is used to justify and describe various functions we embed in neural networks to make them work and be more efficient (non-linear units, dropout and L1/L2 regularization) and also reason about the way the networks are architected (residual neural networks). . . : . Neural Network as a collection of Journalists Intention | Embedding = Vector = Ordered Collection of Characteristics/Features | Dot Product = Question | Matrix = Questionnaire | Neuron = Journalist asking a single question | The need for more Questions/Journalists | Anatomy of a Neural Network = Network of groups of Journalists visited in sequence | Non-Linearities = Learning to ask significant questions | Dropout Regularization Intuition = Asking fewer questions to retrieve the same information forces the questions to be more general | L1/L2 Regularization Intuition = Questions should target a direction/essence and not a specific point | Residual Neural Networks = Refining / Adding to previous answers | | Intention . Inspiration for the creation of neural networks has been drawn from the neurons in the brain. Based on this, there has to be a simple, thus unconscious metaphor, which can lead to better understanding how the networks operate. This story tries to do just this: Provide for a metaphor which allows for the frictionless flow of the understanding of neural networks within the human brain :-). Hopefully, being able to describe the operation of the neural networks in words and by leveraging a ‘concrete’ metaphor will lead to philosophical perambulations around how they can evolve. . Embedding = Vector = Ordered Collection of Characteristics/Features . Our first stop is the notion of the embedding. Take a look at the below image showing the genre ingredients of the movie Forrest Gump. . . “Forrest Gump” is a movie that contains a bit of comedy, a fare amount of romance and drama, a lot of magical realism. . In vector form the above can be depicted as : &#39;Forrest Gump&#39; = [ 0.2 0.4 0.6 0.9 ] . In order to depict the ingredient features a vector contains we have the following : . &#39;Forrest Gump&#39; = [ 0.2 (comedy) 0.4 (romance) 0.6 (drama) 0.9 (magical_realism) ] . Now, for the crucial part : Given the representation of the movie, what question should be asked if one wanted to find out how similar “Forrest Gump” is to romantic and dramatic movies ? . A possible question could be the following : . Dot Product = Question | Matrix = Questionnaire . If a single dot product is a Question being asked, then matrix vector multiplication is asking many Questions, that is a Questionnaire whereby the questions a laid out in the rows of the matrix. . . Neuron = Journalist asking a single question . We reach our first abstraction on what a neuron is doing. It is just asking a question of the form : “How similar the input is to …..?” . . Imagine you are given the following set of points (with classes orange and blue). . . For completeness the above scatter plot provided also as a line plot. . . Could you come up with a question of the form “how similar” to ask a point of interest and decide on the class it belongs ? . Well after training a single neuron (linear regression algorithm) the question that pops up is the similarity of the point under classification with the vector as shown in ‘green’. The line in ‘red’ is the line perpendicular to the ‘green’ line and is provided to show that in a way the question that is learnt is as much as possible learning to separate the input classes. . Should we watn to be more specific, the Question which is being asked is : “How similar is the vector location of the point under test to the vector whose representation is in green?”. If the similarity is positive (that is if the point sits at the right of the red line since the points along the red line have 0 similarity to the green vector) then the point is classified as blue. Otherwise the point is classified as orange. This is why the red line is actually sitting in the middle of the lines blue and orange. . The need for more Questions/Journalists . The data in the previous example could be separated with a single question. The two distinct classes are linearly separable in mathematical terms, which pretty much means that a line can be drawn which separates them. . This is not most of the time the case since no single question exists which could separate the data. Take a look for example at the below dataset : . . The data in the above figure cannot be separated with a single question. We need more questions to ask. . We need a series of questions whose answers will be such that eventually after asking a single question on the answers of the previous questions we could separate the data. In mathematical terms, this is called mapping the input space to another space. This is mapping actually the input features to the answers of the questions. Should the questions be clever, the data structure and characteristics could be deduced and understood. . Now, the way towards neural networks is open. We combine a series of questions. Each new layer (group of journalists/questions) builds on top of the previous answers. . Anatomy of a Neural Network = Network of groups of Journalists visited in sequence . Neural networks order many journalists in sequence. The journalists of later layers/stages ask questions based on the answers of previous stages. It is much like an interview process. Input from various interview stages is provided to later ones and combined to provide the final result. A constant refinement and processing of information is taking place. . . Non-Linearities = Learning to ask significant questions . Suppose we set the target to come up with significant questions. How could we do this. As a reminder our questions are of the form : “How similar …..?” . If we say that we will not be paying attention to the questions with low similarity since this similarity does not add to our understanding of the data, we would like the questions we learn to ask to have as high similarity as possible. That is we want to learn only from what provides for a good similarity value to our questions and not negative or zero one. . This can be an intrinsic function of the neurons in our brain. In order to enforce such a logic into our neural network we drive the answer to the question in each neuron through a non-linear unit (a famous such unit is the ReLU Function shown below). . . A programmatical view of the function of non-linear units leading to the introduction of logic in the system is the following: . // Our original questions are of the form ‘How similar’? // (The non linearity adds some if logic in the above case) if how similar &lt; 0: return 0 // not at all similar else: return how_similar . Dropout Regularization Intuition = Asking fewer questions to retrieve the same information forces the questions to be more general . If we limit the number of questions which are being asked, then we force the questions to be more general and not focus on details as they would need to cover more cases and try to identify broader underlying patterns. . An example from real life would be : . Suppose we have the fact that “It is snowing in Russia and in Alaska”. If we had 2 questions and a territory where we searched wtether there was snow in it we could ask ? . Is the territory close to Alaska ? | Is the territory close to Russia ? | . A territory like “Iceland” would thus not be properly identified as a territory with snow. . By limiting the question to just 1 we could come up with something like : . Is the terrritory over a particular latitude ? | . L1/L2 Regularization Intuition = Questions should target a direction/essence and not a specific point . If we think about what L1/L2 regularization tries to do, we understand that it tries to make the parameters of a question as small as possible. Thus, the target is to find the essence of a question (i.e. How similar the acting of the actor is with regards to “Passionate Actor Performances”?) and not specific comparisons (i.e. How wimilar the acting of the actor is with regards to “Performance of Al Pacino in the Scent of a Woman?”?). We are looking out for questions that are unit vectors and thus solely cover direction/essence and not vectors close to specific point which do not generalize well and are more subjective. . Residual Neural Networks = Refining / Adding to previous answers . What Residual networks are intuitevely doing is that they combine the answers provided in previous steps with small additions/refinements to them which are provided on top of these previous answers. . It is like the process of looking for the position of an object: . One first targets the room and then searches more specifically within the very same room or further investigate the location of the object. .",
            "url": "https://igtzolas.github.io/blog/neural%20networks/2021/07/30/nn.html",
            "relUrl": "/neural%20networks/2021/07/30/nn.html",
            "date": " • Jul 30, 2021"
        }
        
    
  

  
  
      ,"page0": {
          "title": "An Example Markdown Post",
          "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
          "url": "https://igtzolas.github.io/blog/backup/2020-01-14-test-markdown-post.html",
          "relUrl": "/backup/2020-01-14-test-markdown-post.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "",
          "url": "https://igtzolas.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://igtzolas.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}